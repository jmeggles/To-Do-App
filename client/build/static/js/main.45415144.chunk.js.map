{"version":3,"sources":["logo.png","components/create-todo.js","components/edit-todo.js","components/todos-list.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CreateTodo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeTodoDescription","bind","assertThisInitialized","onChangeTodoPriority","onSubmit","state","todo_description","todo_priority","todo_completed","e","setState","target","value","preventDefault","console","log","concat","newTodo","axios","post","then","res","data","react_default","a","createElement","style","marginTop","className","type","onChange","name","id","checked","Component","EditTodo","onChangeTodoCompleted","_this2","get","match","params","response","catch","error","obj","history","push","htmlFor","Todo","todo","Link","to","_id","TodoList","todos","_this3","map","currentTodo","i","todos_list_Todo","key","todoList","App","BrowserRouter","href","src","logo","alt","width","height","Route","path","exact","component","TodosList","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45415144.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e351872b.png\";","import React, { Component } from \"react\";\nimport axios from \"axios\"; // promise-based HTTP client that sports an API\n\n// exporting this component to import at App.js \nexport default class CreateTodo extends Component {\n\n    // accepts inputs of properties.....\n    constructor(props) {\n        // super is the parent constructor and passing in props\n        super(props);\n        // Because in the 3 implemented methods we’re dealing with the component’s state object we need to make sure to bind those methods to this by adding the following lines of code to the constructor:\n        this.onChangeTodoDescription = this.onChangeTodoDescription.bind(this);\n        this.onChangeTodoPriority = this.onChangeTodoPriority.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        // ...and returns these elements to appear on screen. this.state contains data specific to this component that may change over time. treat as immutable.\n        this.state = {\n            todo_description: \" \",\n            todo_priority: \" \",\n            todo_completed: false\n        }\n    }\n    // these onChange methods will update the state properties\n    onChangeTodoDescription(e) {\n        this.setState({\n            todo_description: e.target.value\n        });\n    }\n    onChangeTodoPriority(e) {\n        this.setState({\n            todo_priority: e.target.value\n        });\n    }\n\n    // finally, these methods will handle the submit event which will create a new to-do item.\n    onSubmit(e) {\n        // Inside this method we need to call e.preventDefault to ensure that the default HTML form submit behaviour is prevented. Because the back-end of our application is not implemented yet we’re only printing out what’s currently available in the local component’s state to the console. \n        e.preventDefault();\n\n        console.log(`Form submitted:`);\n        console.log(`To-Do Description: ${this.state.todo_description}`);\n        console.log(`To-Do Prority: ${this.state.todo_priority}`);\n        console.log(`To-Do Completed: ${this.state.todo_completed}`);\n\n        // in the third installment, adding the object {} \n        const newTodo = {\n            todo_description: this.state.todo_description,\n            todo_priority: this.state.todo_priority,\n            todo_completed: this.state.todo_completed\n        }\n        // added in the third installlment of this project; this is the endpoint that accepts the incoming post request. the axios post returns a promise\n        axios.post(\"http://localhost:3001/todos/add\", newTodo)\n            .then(res => console.log(res.data));\n            \n\n        // Finally we’re making sure that the form is reset by resetting the state object.\n        this.setState({\n            todo_description: \" \",\n            todo_priority: \" \",\n            todo_completed: false\n        })\n    }\n    // render, return, div is the front end of what appears on the page for the user \n    render() {\n        return (\n            <div style={{marginTop: 10}}>\n                <h3>Create New To-Do</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\"> \n                        <label>Description: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.todo_description}\n                                onChange={this.onChangeTodoDescription}\n                                />\n                    </div>\n                    <div className=\"form-group\">\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"priorityOptions\" \n                                    id=\"priorityLow\" \n                                    value=\"Low\"\n                                    checked={this.state.todo_priority==='Low'} \n                                    onChange={this.onChangeTodoPriority}\n                                    />\n                            <label className=\"form-check-label\">Low</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"priorityOptions\" \n                                    id=\"priorityMedium\" \n                                    value=\"Medium\" \n                                    checked={this.state.todo_priority==='Medium'} \n                                    onChange={this.onChangeTodoPriority}\n                                    />\n                            <label className=\"form-check-label\">Medium</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"priorityOptions\" \n                                    id=\"priorityHigh\" \n                                    value=\"High\" \n                                    checked={this.state.todo_priority==='High'} \n                                    onChange={this.onChangeTodoPriority}\n                                    />\n                            <label className=\"form-check-label\">High</label>\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <input  className=\"btn btn-primary\"\n                                type=\"submit\" \n                                value=\"Create To-Do\"  \n                                />\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport axios from \"axios\"; // promise-based HTTP client that supports an API.\n\nexport default class EditTodo extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChangeTodoDescription = this.onChangeTodoDescription.bind(this);\n        this.onChangeTodoPriority = this.onChangeTodoPriority.bind(this);\n        this.onChangeTodoCompleted = this.onChangeTodoCompleted.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            todo_description: \"\",\n            todo_priority: \"\",\n            todo_completed: false\n        }\n    }\n\n    componentDidMount() {\n        // makes a browser request for all to-do items\n        axios.get(\"http://localhost:3001/todos/\" + this.props.match.params.id)\n        // if first argument is fulfilled, .then() will be called.\n            .then(response => {\n                this.setState({\n                    todo_description: response.data.todo_description,\n                    todo_priority: response.data.todo_priority,\n                    todo_completed: response.data.todo_completed\n                })\n                  // handle success\n                console.log(response);\n            })\n            // if rejected, this argument (handle error) will be called.\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    // event handler\n    onChangeTodoDescription(e) {\n        this.setState({\n            // grabs the meta data from the description to-do \n            todo_description: e.target.value\n        });\n    }\n\n    onChangeTodoPriority(e) {\n        this.setState({\n            // grabs the meta data from the priority to-do \n            todo_priority: e.target.value\n        });\n    }\n\n    onChangeTodoCompleted(e) {\n        this.setState({\n            todo_completed: !this.state.todo_completed\n        });\n    }\n\n    onSubmit(e) {\n        // preventDefault is to prevent the default action associated with the event.\n        e.preventDefault();\n        const obj = {\n            todo_description: this.state.todo_description,\n            todo_priority: this.state.todo_priority,\n            todo_completed: this.state.todo_completed\n        };\n        // sends the updated request\n        axios.post(\"http://localhost:3001/todos/update/\" + this.props.match.params.id, obj)\n            .then(res => console.log(res.data));\n\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Update Todo</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Description: </label>\n                        <input type=\"text\"\n                            className=\"form-control\"\n                            value={this.state.todo_description}\n                            onChange={this.onChangeTodoDescription}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\"\n                                type=\"radio\" // form validation.  radios are for selecting one option from many such as this case with Low, Medium, High priorities.\n                                name=\"priorityOptions\"\n                                id=\"priorityLow\"\n                                value=\"Low\"\n                                checked={this.state.todo_priority === \"Low\"} \n                                onChange={this.onChangeTodoPriority}\n                            />\n                            <label className=\"form-check-label\">Low</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\"\n                                type=\"radio\"\n                                name=\"priorityOptions\"\n                                id=\"priorityMedium\"\n                                value=\"Medium\"\n                                checked={this.state.todo_priority === \"Medium\"}\n                                onChange={this.onChangeTodoPriority}\n                            />\n                            <label className=\"form-check-label\">Medium</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\"\n                                type=\"radio\"\n                                name=\"priorityOptions\"\n                                id=\"priorityHigh\"\n                                value=\"High\"\n                                checked={this.state.todo_priority === \"High\"}\n                                onChange={this.onChangeTodoPriority}\n                            />\n                            <label className=\"form-check-label\">High</label>\n                        </div>\n                        <div className=\"form-check\">\n                            <input type=\"checkbox\"\n                                className=\"form-check-input\"\n                                id=\"completedCheckbox\"\n                                name=\"completedCheckbox\"\n                                onChange={this.onChangeTodoCompleted}\n                                checked={this.state.todo_completed}\n                                value={this.state.todo_completed}\n                            />\n                            <label className=\"form-check-label\" htmlFor=\"completedCheckbox\">\n                                Completed\n                            </label>\n                        </div>\n                        <br />\n                        <div className=\"form-group\">\n                            <input type=\"submit\" \n                                value=\"Update Todo\" \n                                className=\"btn\" />\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\"; // promise-based HTTP client that sports an API\n\n// \nconst Todo = props => (\n    <tr>\n        {/* table data */}\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_description}</td>\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_priority}</td>\n        <td>\n            <Link to={\"/edit/\" + props.todo._id}>Edit</Link>\n        </td>\n    </tr>\n);\n\nexport default class TodoList extends Component {\n    // third installment for this project\n    constructor(props) {\n        super(props);\n        // contain a property of todos with an empty array\n        this.state = { todos: [] };\n    }\n\n    // method to request backend and retrieve list of todos\n    componentDidMount() {\n        axios.get(\"http://localhost:3001/todos/\")\n            .then(response => {\n                // setState passing in an object containing the todos state property; not set to an empty array.  it's set to the data getting de;ivered with the response object.  assigning todos in the state\n                this.setState({ todos: response.data })\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    // final installment, adding the update info to delete todo\n    componentDidUpdate() {\n        axios.get(\"http://localhost:3001/todos/\")\n            .then(response => {\n                this.setState({ todos: response.data });\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    todoList() {\n        // iterating over whats inside of this.state.todos with map method with a callback function for every item. the function will get the currentTodo item as the first argument and index (i) as the second argument\n        return this.state.todos.map(function (currentTodo, i) {\n            // the return will get back every todo item with the component is getting passed into a prop named todo and set to what's inside currentTodo\n            return <Todo todo={currentTodo} key={i} />;\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>To-Dos List</h3>\n                <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n                    <thead>\n                        <tr>\n                            <th>Description</th>\n                            <th>Priority</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.todoList()}\n                        {/* helper method to get back jsx code for the rows of the table */}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// importing components files\nimport CreateTodo from \"./components/create-todo\";\nimport EditTodo from \"./components/edit-todo\";\nimport TodosList from \"./components/todos-list\";\n\nimport logo from \"./logo.png\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"/#\" target=\"_blank\">\n              <img src={logo} alt=\"logo\" width=\"30\" height=\"30\"/>\n            </a>\n            <Link to=\"/\" className=\"navbar-brand\">The To-Do App</Link>\n            <div className=\"collpase navbar-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">View To-Do List</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/create\" className=\"nav-link\">Create New To-Do</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <br/>\n          {/* routing config.  using paths to 3 separate components */}\n          <Route path=\"/\" exact component={TodosList} />\n          <Route path=\"/edit/:id\" component={EditTodo} />\n          <Route path=\"/create\" component={CreateTodo} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}